from gpiozero import RGBLED,  Button
import time
import random
from signal import pause


# active_high must be true because it is a common anode RGBLed
LED = RGBLED(red=17, green=18, blue=27, active_high=True)
BUTTON = Button(25)  # define buttonPin

# tuples
#red = (1, 0, 0)
#blue = (0, 0, 1)
#green = (1, 1, 0)

# array of tuples
# colors = [red, blue, green]

pushed= False
react = False


def set_color(r, g, b):
    """ Invert the colors due to using a common anode """
    LED.color = (1 - r, 1 - g, 1 - b)
    


def initial_test():
    set_color(1, 0, 0)
    print("All red")
    time.sleep(1)
    set_color(0, 1, 0)
    print("All green")
    time.sleep(1)
    set_color(0, 0, 1)
    print("All blue")
    time.sleep(1)

def changeLedState():
    global react
    print("button pushed")
    react = not react
    
def reaction():
    if set_color(selected_color[0], selected_color[1], selected_color[2]) == True:
        i = 0
        while i < 5:
            print("fast?")
            set_color(0,1,0)
            time.sleep(.5)
            set_color(0,0,0)
            time.sleep(.5)
            set_color(0,1,0)
        LED.close() 
    else:
        i = 0
        while i < 5:
            print("Slow")
            set_color(1,0,0)
            time.sleep(.5)
            set_color(0,0,0)
            time.sleep(.5)
            set_color(1,0,0)
            i = i +1
            
               
    LED.close()
    
    
    
def loop():
    global pushed
    c1 = (1,0,0)
    c2 = (0,1,0)
    c3 = (0,0,1)
    game_color = [c1,c2,c3]
    
    while pushed == False and react == False :
        global selected_color
        selected_color = random.choice((game_color))
        if  selected_color == c2:
            set_color(selected_color[0], selected_color[1], selected_color[2])
            pushed = True
            time.sleep(1)
            
            
        else:
            set_color(selected_color[0], selected_color[1], selected_color[2])
            time.sleep(1)
    reaction()
            


        
        
def destroy():
    LED.close()
    
if __name__ == '__main__':     # Program entrance
    print ('Program is starting ... ')
    initial_test()
    
    try:
        
        # If the button gets pressed, call the function
        # This is an event
        BUTTON.when_activated = changeLedState
        
          
        loop()
        
        
        
        
    except KeyboardInterrupt:  # Press ctrl-c to end the program.
        destroy()
