#Reference DHT11, Thermometer, and Doorbell
# Description : DIY Thermometer
from pathlib import Path
import sys
import time
import math
#buzzer stuff
from gpiozero import Buzzer
BUZZER = Buzzer(22)

# Description :	Read the temperature and humidity data of DHT11
import RPi.GPIO as GPIO
import time
import Freenove_DHT as DHT
DHTPin = 11     #define the pin of DHT11

HERE = Path(__file__).parent.parent.parent
sys.path.append(str(HERE / 'Common'))
from ADCDevice import *

USING_GRAVITECH_ADC = False # Only modify this if you are using a Gravitech ADC

ADC = ADCDevice() # Define an ADCDevice class object

def setup():
    global ADC
    if(ADC.detectI2C(0x48) and USING_GRAVITECH_ADC): 
        ADC = GravitechADC()
    elif(ADC.detectI2C(0x48)): # Detect the pcf8591.
        ADC = PCF8591()
    elif(ADC.detectI2C(0x4b)): # Detect the ads7830
        ADC = ADS7830()
    else:
        print("No correct I2C address found, \n"
            "Please use command 'i2cdetect -y 1' to check the I2C address! \n"
            "Program Exit. \n")
        exit(-1)

def loop():
    dht = DHT.DHT(DHTPin)   #create a DHT class object
    counts = 0 # Measurement counts
    while True:
        value = ADC.analogRead(0)        # read ADC value A0 pin
        voltage = value / 255.0 * 3.3        # calculate voltage
        Rt = 10 * voltage / (3.3 - voltage)    # calculate value for potentiometer
        
        #Making sure the program doesn't crash when the potentiometer is set to 0
        Rt= max(Rt,1)
        
        tempK = 1/(1/(273.15 + 25) + math.log(Rt/10)/3950.0) # calculate temperature (Kelvin)
        #I'd like to make it so the maximal potentiometer values don't break the program
        
        
        tempC = tempK - 273.15        # calculate temperature (Celsius)
        tempF = tempC * 1.8 + 32
        print (f'ADC Value: {value} \tVoltage: {voltage:.2f} \tTemperature(C): {tempC:.2f} \tTemperature(F): {tempF:.2f}')
        
        
        #DHT11 stuff
        counts += 1
        print("Measurement counts: ", counts)
        for counts in range(0,15):            
            chk = dht.readDHT11()     #read DHT11 and get a return value. Then determine whether data read is normal according to the return value.
            if (chk is dht.DHTLIB_OK):      #read DHT11 and get a return value. Then determine whether data read is normal according to the return value.
                print("DHT11,OK!")
                break
            time.sleep(0.1)
        print("Humidity : %.2f, \t Temperature : %.2f \n"%(dht.humidity,dht.temperature))
        time.sleep(2) 
        
        #should it beep
        
        if dht.temperature > tempC:
            time.sleep(0.1)
            BUZZER.on() # turn on buzzer
            time.sleep(0.1)
            BUZZER.off() # not be madness inducing
            print ('Temperature warning! ')
        if dht.humidity > tempF:
            time.sleep(0.15)
            BUZZER.on() # turn on buzzer
            time.sleep(0.1)
            BUZZER.off() # not be madness inducing
            print ('Humidity warning! ')
        
        if dht.temperature <= tempC:
            BUZZER.off()
            print ('Temperature is under threshold :) ')
        if dht.humidity <= tempF:
            BUZZER.off()
            print ('Humidity is under threshold :) ')

def destroy():
    ADC.close()
    BUZZER.close()
    
if __name__ == '__main__':  # Program entrance
    print ('Program is starting... ')
    setup()
    try:
        loop()
    except KeyboardInterrupt: # Press ctrl-c to end the program.
        GPIO.cleanup()
        destroy()
        exit()  
        